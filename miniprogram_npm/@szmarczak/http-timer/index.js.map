{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nconst deferToConnect = require('defer-to-connect');\n\nmodule.exports = request => {\n\tconst timings = {\n\t\tstart: Date.now(),\n\t\tsocket: null,\n\t\tlookup: null,\n\t\tconnect: null,\n\t\tupload: null,\n\t\tresponse: null,\n\t\tend: null,\n\t\terror: null,\n\t\tphases: {\n\t\t\twait: null,\n\t\t\tdns: null,\n\t\t\ttcp: null,\n\t\t\trequest: null,\n\t\t\tfirstByte: null,\n\t\t\tdownload: null,\n\t\t\ttotal: null\n\t\t}\n\t};\n\n\tconst handleError = origin => {\n\t\tconst emit = origin.emit.bind(origin);\n\t\torigin.emit = (event, ...args) => {\n\t\t\t// Catches the `error` event\n\t\t\tif (event === 'error') {\n\t\t\t\ttimings.error = Date.now();\n\t\t\t\ttimings.phases.total = timings.error - timings.start;\n\n\t\t\t\torigin.emit = emit;\n\t\t\t}\n\n\t\t\t// Saves the original behavior\n\t\t\treturn emit(event, ...args);\n\t\t};\n\t};\n\n\tlet uploadFinished = false;\n\tconst onUpload = () => {\n\t\ttimings.upload = Date.now();\n\t\ttimings.phases.request = timings.upload - timings.connect;\n\t};\n\n\thandleError(request);\n\n\trequest.once('socket', socket => {\n\t\ttimings.socket = Date.now();\n\t\ttimings.phases.wait = timings.socket - timings.start;\n\n\t\tconst lookupListener = () => {\n\t\t\ttimings.lookup = Date.now();\n\t\t\ttimings.phases.dns = timings.lookup - timings.socket;\n\t\t};\n\n\t\tsocket.once('lookup', lookupListener);\n\n\t\tdeferToConnect(socket, () => {\n\t\t\ttimings.connect = Date.now();\n\n\t\t\tif (timings.lookup === null) {\n\t\t\t\tsocket.removeListener('lookup', lookupListener);\n\t\t\t\ttimings.lookup = timings.connect;\n\t\t\t\ttimings.phases.dns = timings.lookup - timings.socket;\n\t\t\t}\n\n\t\t\ttimings.phases.tcp = timings.connect - timings.lookup;\n\n\t\t\tif (uploadFinished && !timings.upload) {\n\t\t\t\tonUpload();\n\t\t\t}\n\t\t});\n\t});\n\n\trequest.once('finish', () => {\n\t\tuploadFinished = true;\n\n\t\tif (timings.connect) {\n\t\t\tonUpload();\n\t\t}\n\t});\n\n\trequest.once('response', response => {\n\t\ttimings.response = Date.now();\n\t\ttimings.phases.firstByte = timings.response - timings.upload;\n\n\t\thandleError(response);\n\n\t\tresponse.once('end', () => {\n\t\t\ttimings.end = Date.now();\n\t\t\ttimings.phases.download = timings.end - timings.response;\n\t\t\ttimings.phases.total = timings.end - timings.start;\n\t\t});\n\t});\n\n\treturn timings;\n};\n"]}