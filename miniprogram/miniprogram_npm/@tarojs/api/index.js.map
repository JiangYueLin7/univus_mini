{"version":3,"sources":["index.cjs.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar runtime = require('@tarojs/runtime');\nvar shared = require('@tarojs/shared');\n\nconst ENV_TYPE = {\n    WEAPP: 'WEAPP',\n    SWAN: 'SWAN',\n    ALIPAY: 'ALIPAY',\n    TT: 'TT',\n    QQ: 'QQ',\n    JD: 'JD',\n    WEB: 'WEB',\n    RN: 'RN',\n    HARMONY: 'HARMONY',\n    QUICKAPP: 'QUICKAPP',\n    HARMONYHYBRID: 'HARMONYHYBRID',\n};\nfunction getEnv() {\n    if (process.env.TARO_ENV === 'weapp') {\n        return ENV_TYPE.WEAPP;\n    }\n    else if (process.env.TARO_ENV === 'alipay') {\n        return ENV_TYPE.ALIPAY;\n    }\n    else if (process.env.TARO_ENV === 'swan') {\n        return ENV_TYPE.SWAN;\n    }\n    else if (process.env.TARO_ENV === 'tt') {\n        return ENV_TYPE.TT;\n    }\n    else if (process.env.TARO_ENV === 'jd') {\n        return ENV_TYPE.JD;\n    }\n    else if (process.env.TARO_ENV === 'qq') {\n        return ENV_TYPE.QQ;\n    }\n    else if (process.env.TARO_ENV === 'harmony-hybrid') {\n        return ENV_TYPE.HARMONYHYBRID;\n    }\n    else if (process.env.TARO_ENV === 'h5' || process.env.TARO_PLATFORM === 'web') {\n        return ENV_TYPE.WEB;\n    }\n    else if (process.env.TARO_ENV === 'rn') {\n        return ENV_TYPE.RN;\n    }\n    else if (process.env.TARO_ENV === 'harmony' || process.env.TARO_PLATFORM === 'harmony') {\n        return ENV_TYPE.HARMONY;\n    }\n    else if (process.env.TARO_ENV === 'quickapp') {\n        return ENV_TYPE.QUICKAPP;\n    }\n    else {\n        return process.env.TARO_ENV || 'Unknown';\n    }\n}\n\nclass Chain {\n    constructor(requestParams, interceptors, index) {\n        this.index = index || 0;\n        this.requestParams = requestParams || {};\n        this.interceptors = interceptors || [];\n    }\n    proceed(requestParams = {}) {\n        this.requestParams = requestParams;\n        if (this.index >= this.interceptors.length) {\n            throw new Error('chain 参数错误, 请勿直接修改 request.chain');\n        }\n        const nextInterceptor = this._getNextInterceptor();\n        const nextChain = this._getNextChain();\n        const p = nextInterceptor(nextChain);\n        const res = p.catch(err => Promise.reject(err));\n        Object.keys(p).forEach(k => shared.isFunction(p[k]) && (res[k] = p[k]));\n        return res;\n    }\n    _getNextInterceptor() {\n        return this.interceptors[this.index];\n    }\n    _getNextChain() {\n        return new Chain(this.requestParams, this.interceptors, this.index + 1);\n    }\n}\n\nclass Link {\n    constructor(interceptor) {\n        this.taroInterceptor = interceptor;\n        this.chain = new Chain();\n    }\n    request(requestParams) {\n        const chain = this.chain;\n        const taroInterceptor = this.taroInterceptor;\n        chain.interceptors = chain.interceptors\n            .filter(interceptor => interceptor !== taroInterceptor)\n            .concat(taroInterceptor);\n        return chain.proceed(Object.assign({}, requestParams));\n    }\n    addInterceptor(interceptor) {\n        this.chain.interceptors.push(interceptor);\n    }\n    cleanInterceptors() {\n        this.chain = new Chain();\n    }\n}\nfunction interceptorify(promiseifyApi) {\n    return new Link(function (chain) {\n        return promiseifyApi(chain.requestParams);\n    });\n}\n\nfunction timeoutInterceptor(chain) {\n    const requestParams = chain.requestParams;\n    let p;\n    const res = new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n            clearTimeout(timeout);\n            reject(new Error('网络链接超时,请稍后再试！'));\n        }, (requestParams && requestParams.timeout) || 60000);\n        p = chain.proceed(requestParams);\n        p\n            .then(res => {\n            if (!timeout)\n                return;\n            clearTimeout(timeout);\n            resolve(res);\n        })\n            .catch(err => {\n            timeout && clearTimeout(timeout);\n            reject(err);\n        });\n    });\n    // @ts-ignore\n    if (!shared.isUndefined(p) && shared.isFunction(p.abort))\n        res.abort = p.abort;\n    return res;\n}\nfunction logInterceptor(chain) {\n    const requestParams = chain.requestParams;\n    const { method, data, url } = requestParams;\n    // eslint-disable-next-line no-console\n    console.log(`http ${method || 'GET'} --> ${url} data: `, data);\n    const p = chain.proceed(requestParams);\n    const res = p\n        .then(res => {\n        // eslint-disable-next-line no-console\n        console.log(`http <-- ${url} result:`, res);\n        return res;\n    });\n    // @ts-ignore\n    if (shared.isFunction(p.abort))\n        res.abort = p.abort;\n    return res;\n}\n\nvar interceptors = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    logInterceptor: logInterceptor,\n    timeoutInterceptor: timeoutInterceptor\n});\n\nfunction Behavior(options) {\n    return options;\n}\nfunction getPreload(current) {\n    return function (key, val) {\n        current.preloadData = shared.isObject(key)\n            ? key\n            : {\n                [key]: val\n            };\n    };\n}\nconst defaultDesignWidth = 750;\nconst defaultDesignRatio = {\n    640: 2.34 / 2,\n    750: 1,\n    828: 1.81 / 2\n};\nconst defaultBaseFontSize = 20;\nconst defaultUnitPrecision = 5;\nconst defaultTargetUnit = 'rpx';\nfunction getInitPxTransform(taro) {\n    return function (config) {\n        const { designWidth = defaultDesignWidth, deviceRatio = defaultDesignRatio, baseFontSize = defaultBaseFontSize, targetUnit = defaultTargetUnit, unitPrecision = defaultUnitPrecision, } = config;\n        taro.config = taro.config || {};\n        taro.config.designWidth = designWidth;\n        taro.config.deviceRatio = deviceRatio;\n        taro.config.baseFontSize = baseFontSize;\n        taro.config.targetUnit = targetUnit;\n        taro.config.unitPrecision = unitPrecision;\n    };\n}\nfunction getPxTransform(taro) {\n    return function (size) {\n        const config = taro.config || {};\n        const baseFontSize = config.baseFontSize;\n        const deviceRatio = config.deviceRatio || defaultDesignRatio;\n        const designWidth = ((input = 0) => shared.isFunction(config.designWidth)\n            ? config.designWidth(input)\n            : config.designWidth || defaultDesignWidth)(size);\n        if (!(designWidth in deviceRatio)) {\n            throw new Error(`deviceRatio 配置中不存在 ${designWidth} 的设置！`);\n        }\n        const targetUnit = config.targetUnit || defaultTargetUnit;\n        const unitPrecision = config.unitPrecision || defaultUnitPrecision;\n        const formatSize = ~~size;\n        let rootValue = 1 / deviceRatio[designWidth];\n        switch (targetUnit) {\n            case 'rem':\n                rootValue *= baseFontSize * 2;\n                break;\n            case 'px':\n                rootValue *= 2;\n                break;\n        }\n        let val = formatSize / rootValue;\n        if (unitPrecision >= 0 && unitPrecision <= 100) {\n            val = Number(val.toFixed(unitPrecision));\n        }\n        return val + targetUnit;\n    };\n}\n\n/* eslint-disable camelcase */\nconst Taro = {\n    Behavior,\n    getEnv,\n    ENV_TYPE,\n    Link,\n    interceptors,\n    Current: runtime.Current,\n    getCurrentInstance: runtime.getCurrentInstance,\n    options: runtime.options,\n    nextTick: runtime.nextTick,\n    eventCenter: runtime.eventCenter,\n    Events: runtime.Events,\n    getInitPxTransform,\n    interceptorify\n};\nTaro.initPxTransform = getInitPxTransform(Taro);\nTaro.preload = getPreload(runtime.Current);\nTaro.pxTransform = getPxTransform(Taro);\n\nexports.default = Taro;\n//# sourceMappingURL=index.cjs.js.map\n"]}